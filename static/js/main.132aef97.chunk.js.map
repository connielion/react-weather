{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","className","href","Form","props","onSubmit","getWeather","name","placeholder","type","Weather","city","country","temperature","humidity","description","error","require","config","API_KEY","process","App","state","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","_this","setState","main","temp","sys","weather","stop","components_Titles","components_Form","this","components_Weather","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.132aef97.chunk.js","sourcesContent":["import React from 'react';\n\nconst Titles = () => (\n\t<div>\n\t\t<h1 className=\"title-container__title\"> React.js Weather </h1>\n\t\t<p className=\"title-container__subtitle\"> Find out current temperature and conditions... </p>\n\t\t<a href=\"https://github.com/connielion/react-weather\" className=\"title-container__subtitle\">\n\t\t\thttps://github.com/connielion/react-weather\n\t\t</a>\n\t\t<p className=\"title-container__subtitle\">Made with React.js,OpenWeatherMap API, Bootstrap & Google Fonts.</p>\n\t</div>\n);\nexport default Titles;\n","import React from 'react';\n\nconst Form = (props) => (\n\t<form onSubmit={props.getWeather}>\n\t\t<input name=\"city\" placeholder=\"City(ex: Seatle)\" type=\"text\" />\n\t\t<input name=\"country\" placeholder=\"Country(ex: US)\" type=\"text\" />\n\t\t<button>Get Weather</button>\n\t</form>\n);\n\nexport default Form;\n","import React from 'react';\n\nconst Weather = (props) => (\n\t<div className=\"weather__info\">\n\t\t{/* render  when props exist  */}\n\t\t{props.city &&\n\t\tprops.country && (\n\t\t\t<p className=\"weather__key\">\n\t\t\t\tLocation:{' '}\n\t\t\t\t<span className=\"weather__value\">\n\t\t\t\t\t{props.city},{props.country}\n\t\t\t\t</span>\n\t\t\t</p>\n\t\t)}\n\t\t{props.temperature && (\n\t\t\t<p className=\"weather__key\">\n\t\t\t\tTemperature: <span className=\"weather__value\">{props.temperature} Â°F</span>\n\t\t\t</p>\n\t\t)}\n\t\t{props.humidity && (\n\t\t\t<p className=\"weather__key\">\n\t\t\t\tHumidity: <span className=\"weather__value\">{props.humidity} %</span>\n\t\t\t</p>\n\t\t)}\n\t\t{props.description && (\n\t\t\t<p className=\"weather__key\">\n\t\t\t\tConditions: <span className=\"weather__value\">{props.description}</span>\n\t\t\t</p>\n\t\t)}\n\t\t{props.error && <p className=\"weather__error\">{props.error}</p>}\n\t</div>\n);\n\nexport default Weather;\n","import React from 'react';\nimport Titles from './components/Titles';\nimport Form from './components/Form';\nimport Weather from './components/Weather';\nrequire('dotenv').config();\n\n// I AIN'T SHOWING MY API KEY!!!\n\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\nclass App extends React.Component {\n\n\n\n\tstate = {\n\t\ttemperature: undefined,\n\t\tcity: undefined,\n\t\tcountry: undefined,\n\t\thumidity: undefined,\n\t\tdescription: undefined,\n\t\terror: undefined\n\t}\n\tgetWeather = async (e) => {\n\t\te.preventDefault();\n\t\tconst city = e.target.elements.city.value;\n\t\tconst country = e.target.elements.country.value;\n\t\tconst api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=imperial`);\n\t\tconst data = await api_call.json();\n\n\t\tif (city && country) {\n\t\t\tthis.setState({\n\t\t\t\ttemperature: data.main.temp,\n\t\t\t\tcity: data.name,\n\t\t\t\tcountry: data.sys.country,\n\t\t\t\thumidity: data.main.humidity,\n\t\t\t\tdescription: data.weather[0].description,\n\t\t\t\terror: \"\"\n\t\t\t});\n\t\t} else {\n\t\t\tthis.setState({\n\t\t\t\ttemperature: undefined,\n\t\t\t\tcity: undefined,\n\t\t\t\tcountry: undefined,\n\t\t\t\thumidity: undefined,\n\t\t\t\tdescription: undefined,\n\t\t\t\terror: \"Please enter the values.\"\n\t\t\t});\n\t\t}\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className=\"wrapper\">\n\t\t\t\t\t<div className=\"main\">\n\t\t\t\t\t\t<div className=\"container\">\n\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t<div className=\"col-xs-5 title-container\">\n\t\t\t\t\t\t\t\t\t<Titles />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"col-xs-7 form-container\">\n\t\t\t\t\t\t\t\t\t<Form getWeather={this.getWeather} />\n\t\t\t\t\t\t\t\t\t<Weather\n\t\t\t\t\t\t\t\t\t\ttemperature={this.state.temperature}\n\t\t\t\t\t\t\t\t\t\thumidity={this.state.humidity}\n\t\t\t\t\t\t\t\t\t\tcity={this.state.city}\n\t\t\t\t\t\t\t\t\t\tcountry={this.state.country}\n\t\t\t\t\t\t\t\t\t\tdescription={this.state.description}\n\t\t\t\t\t\t\t\t\t\terror={this.state.error}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\nrequire('dotenv').config();\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}